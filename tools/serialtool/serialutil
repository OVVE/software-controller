#!/usr/bin/python
# The code is refactored from Tim Bird's  grabserial project in github
# Dependency pySerial module
# Install pySerial for the python version
import os
import sys
import getopt
import serial
import time
import datetime
import re

# Based/Forked from original version . Sony 1.9.8
#VERSION = (1, 9, 8)
VERSION = (0, 1, 1)

try:
    import thread
except ImportError:
    import _thread as thread

verbose = 0
cmdinput = u""


def vprint(message):
    if verbose:
        print(message)


def usage(rcode):
    cmd = "serialutil"

    print("""%s : Serial Console Scraper 
    Note: Run as sudo or add user in dialout group
    Usage: %s [options]
options:
    -h, --help             Print this message
    -d, --device=<devpath> Set the device to read (default '/dev/ttyACM0')
    -b, --baudrate=<val>   Set the baudrate (default 9600 for Arduino Debug )
    -B <val>               Force the baudrate to the indicated value
                             (serialutil won't check if the baudrate is legal)
    -w, --width=<val>      Set the data bit width (default 8)
    -p, --parity=<val>     Set the parity (default N)
    -s, --stopbits=<val>   Set the stopbits (default 1)
    -x, --xonxoff          Enable software flow control (default off)
    -r, --rtscts           Enable RTS/CTS flow control (default off)
    -f, --force-reset      Force pyserial to reset device parameters
    -e, --endtime=<secs>   End the program after the specified seconds have
                           elapsed.
    -c, --command=<cmd>    Send a command to the port before reading - If there is a response
    -t, --time             Print time for each line received.  The time is
                           when the first character of each line is
                           received by %s
    -a, --again            Restart application after -e expires or -q is
                           triggered.
    -T, --systime          Print system time for each line received. The time
                           is the absolute local time when the first character
                           of each line is received by %s . Not pretty like Calendar date
                           Use -F for format
    -F, --timeformat=<val> Specifies system time format for each received line
                           e.g.
                           -F \"%%Y-%%m-%%d %%H:%%M%%S.%%f\"
                           (default \"%%H:%%M:%%S.%%f\")
    -m, --match=<pat>      Specify a regular expression pattern to match to
                           set a base time.  Time values for lines after the
                           line matching the pattern will be relative to
                           this base time.
    -i, --instantpat=<pat> Specify a regular expression pattern to have its
                           time reported at end of run.  It works mid-line.
    -q, --quitpat=<pat>    Specify a regular expression pattern to end the
                           program.  It works mid-line.
    -l, --launchtime       Set base time from launch of program.
    -o, --output=<name>    Output data to the named file.
                           Uses: %%Y-%%m-%%dT%%H:%%M:%%S.bsmc.log  if you use "%%".
    -Q, --quiet            Silent on stdout, serial port data is only written
                           to file, if specified.
    -v, --verbose          Show verbose runtime messages
    -V, --version          Show version number and exit
    -S, --skip             Skip sanity checking of the serial device.
                           May be needed for some devices.
    -n, --nodelta          Skip printing delta between read lines.
        --crtonewline      Promote a carriage return to be treated as a
                           newline (For Windows Client)
Ex: %s -e 30 -t -m "VID_ACTIVE completed"
This will scrape the  serial input for 30 seconds, displaying the time for
each line, and re-setting the base time when the line contains
"VID_ACTIVE completed" is seen.
Ex: serialutil -e 60 -T -Q  -a -o "%%"
Will produce a file that will loook like 19-07-01-15:41:02.bsmc.log but quite on the screen.
""" % (cmd, cmd, cmd, cmd, cmd))
    sys.exit(rcode)


def device_exists(device):
    try:
        from serial.tools import list_ports

        for port in list_ports.comports():
            if port[0] == device:
                return True

        return False
    except serial.SerialException:
        return os.path.exists(device)


def read_input():
    global cmdinput

    # NOTE: cmdinput is in unicode (to make handling similar between
    # python2 and python3)

    while 1:
        if sys.version_info < (3, 0):
            try:
                # raw_input in python 2.x returns byte string
                # decode to unicode
                cmdinput = raw_input().decode(sys.stdin.encoding)
            except EOFError:
                # if we're piping input, we want to stop trying to read
                # it when the pipe closes, or the file ends
                break
        else:
            # raw_input is gone in python3
            # https://www.python.org/dev/peps/pep-3111/
            # input() returns string in unicode already
            try:
                cmdinput = input()
            except EOFError:
                break

    # OK - no more user input, just wait for program exit
    while 1:
        time.sleep(1)


# scrape - main routine to grab  the  serial port output without using other tools 
# and timestamp the output of each line
# takes a list of arguments  like  sys.argv
# also can take an optional file name or pipe  for where to send the data
# by default, data read from the serial port is sent to stdout
# ex   "-o","myoutputfilename"
def scrape(arglist, outputfd=sys.stdout):
    global verbose
    global cmdinput

    # parse the command line options
    try:
        opts, args = getopt.getopt(
                        arglist,
                        "hli:d:b:B:w:p:s:xrfc:taTF:m:e:o:QvVq:nS", [
                            "help",
                            "launchtime",
                            "instantpat=",
                            "device=",
                            "baudrate=",
                            "width=",
                            "parity=",
                            "stopbits=",
                            "xonxoff",
                            "rtscts",
                            "force-reset",
                            "command=",
                            "time",
                            "again",
                            "systime",
                            "timeformat=",
                            "match=",
                            "endtime=",
                            "output=",
                            "quiet",
                            "verbose",
                            "version",
                            "quitpat=",
                            "nodelta",
                            "skip",
                            "crtonewline",
                        ])
    except getopt.GetoptError:
        # print help info and exit
        print("Error parsing command line options")
        usage(2)

    sd = serial.Serial()
    sd.port = "/dev/ttyACM0"
    sd.baudrate = 9600
    sd.bytesize = serial.EIGHTBITS
    sd.parity = serial.PARITY_NONE
    sd.stopbits = serial.STOPBITS_ONE
    sd.xonxoff = False
    sd.rtscts = False
    sd.dsrdtr = False
    # specify a read timeout of 1 second
    sd.timeout = 1
    force = False
    show_time = 0
    show_systime = 0
    basepat = ""
    instantpat = ''
    quitpat = ''
    basetime = 0
    instanttime = None
    endtime = 0
    out_filename = None
    out = None
    command = ""
    skip_device_check = 0
    cr_to_nl = 0
    restart = False
    quiet = False
    systime_format = "%%m-%%d-%H:%M:%S.%f"
    use_delta = True

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            usage(0)
        if opt in ["-d", "--device"]:
            device = arg
            if not skip_device_check and not device_exists(device):
                print("""Error: serial device '%s' does not exist, aborting.
    If you think this port really exists, then try using the -S option
    to skip the serial device check. (put it before the -d argument)"""
                      % device)
                sd.close()
                usage(2)
            sd.port = device
        if opt in ["-b", "--baudrate"]:
            baud = int(arg)
            if baud not in sd.BAUDRATES:
                print("Error: invalid baud rate '%d' specified" % baud)
                print("Valid baud rates are: %s" % str(sd.BAUDRATES))
                print("You can force the baud rate using the -B option")
                sd.close()
                sys.exit(3)
            sd.baudrate = baud
        if opt == "-B":
            sd.baudrate = int(arg)
        if opt in ["-p", "--parity"]:
            par = arg.upper()
            if par not in sd.PARITIES:
                print("Error: invalid parity '%s' specified" % par)
                print("Valid parities are: %s" % str(sd.PARITIES))
                sd.close()
                sys.exit(3)
            sd.parity = par
        if opt in ["-w", "--width"]:
            width = int(arg)
            if width not in sd.BYTESIZES:
                print("Error: invalid data bit width '%d' specified" % width)
                print("Valid data bit widths are: %s" % str(sd.BYTESIZES))
                sd.close()
                sys.exit(3)
            sd.bytesize = width
        if opt in ["-s", "--stopbits"]:
            stop = int(arg)
            if stop not in sd.STOPBITS:
                print("Error: invalid stopbits '%d' specified" % stop)
                print("Valid stopbits are: %s" % str(sd.STOPBITS))
                sd.close()
                sys.exit(3)
            sd.stopbits = stop
        if opt in ["-c", "--command"]:
            command = arg
        if opt in ["-x", "--xonxoff"]:
            sd.xonxoff = True
        if opt in ["-r", "--rtscts"]:
            sd.rtscts = True
        if opt in ["-f", "--force-set"]:
            force = True
        if opt in ["-t", "--time"]:
            show_time = 1
            show_systime = 0
        if opt in ["-a", "--again"]:
            restart = True
        if opt in ["-T", "--systime"]:
            show_time = 0
            show_systime = 1
        if opt in ["-F", "--timeformat"]:
            systime_format = arg
        if opt in ["-m", "--match"]:
            basepat = arg
        if opt in ["-i", "--instantpat"]:
            instantpat = arg
        if opt in ["-q", "--quitpat"]:
            quitpat = arg
        if opt in ["-l", "--launchtime"]:
            print('setting basetime to time of program launch')
            basetime = time.time()
        if opt in ["-e", "--endtime"]:
            endstr = arg
            try:
                endtime = time.time()+float(endstr)
            except ValueError:
                print("Error: invalid endtime %s specified" % arg)
                sd.close()
                sys.exit(3)
        if opt in ["-o", "--output"]:
            out_filename = arg
            if out_filename == "%":
                out_filename = "%y-%m-%d-%H:%M:%S.bsmc.log"
            if "%" in out_filename:
                out_filename = datetime.datetime.now().strftime(out_filename)
        if opt in ["-Q", "--quiet"]:
            quiet = True
        if opt in ["-v", "--verbose"]:
            verbose = 1
        if opt in ["-V", "--version"]:
            print("serialutil version %d.%d.%d" % VERSION)
            sd.close()
            sys.exit(0)
        if opt in ["-S", "--skip"]:
            skip_device_check = 1
        if opt in ["-n", "--nodelta"]:
            use_delta = False
        if opt in ["--crtonewline"]:
            cr_to_nl = 1

    # if verbose, show what our settings are
    if sd.port:
        vprint("Opening serial port %s" % sd.port)
        vprint(
            "%d:%d%s%s:xonxoff=%d:rtscts=%d" %
            (sd.baudrate, sd.bytesize, sd.parity, sd.stopbits,
                sd.xonxoff, sd.rtscts))
    else:
        print("Error: Missing serial port to read from")
        usage(2)
    if endtime and not restart:
        vprint("Program set to end in %s seconds" % endstr)
    if endtime and restart:
        vprint("Program set to restart after %s seconds." % endstr)
    if show_time:
        vprint("Printing timing information for each line")
    if show_systime:
        vprint("Printing absolute timing information for each line")
    if basepat:
        vprint("Matching pattern '%s' to set base time" % basepat)
    if instantpat:
        vprint("Instant pattern '%s' to report time of at end of run" % instantpat)
    if quitpat:
        vprint("Instant pattern '%s' to exit program" % quitpat)
    if skip_device_check:
        vprint("Skipping check of serial device")
    if out_filename:
        try:
            # open in binary mode, to pass through data as unmodified
            # as possible
            out = open(out_filename, "wb")
        except IOError:
            print("Can't open output file '%s'" % out_filename)
            sys.exit(1)
        vprint("Saving data to '%s'" % out_filename)
    if quiet:
        vprint("Keeping quiet on stdout")

    prev1 = 0
    linetime = 0
    newline = 1
    curline = ""
    vprint("Use Control-C to stop...")

    # force device reconfiguration
    if force:
        toggle = sd.xonxoff
        sd.xonxoff = not toggle
        sd.open()
        sd.close()
        sd.xonxoff = toggle
    sd.open()
    sd.flushInput()
    sd.flushOutput()

    if command:
        sd.write((command + u"\n").encode("utf8"))
        sd.flush()

    # capture stdin to send to serial port
    try:
        thread.start_new_thread(read_input, ())
    except thread.error:
        print("Error starting thread for read input\n")

    stop_reason = "serialutil stopped for an unknown reason"
    # read from the serial port until something stops the program
    while 1:
        try:
            if cmdinput:
                sd.write((cmdinput + u"\n").encode("utf8"))
                cmdinput = u""

            # read for up to 1 second
            # NOTE: x should be a byte string in both python 2 and 3
            x = sd.read(1)

            # see if we're supposed to stop yet
            if endtime and time.time() > endtime:
                if restart:
                    vprint(
                        "Restarting %s\n" %
                        datetime.datetime.now().strftime("%H:%M:%S.%f"))
                    if out:
                        out.close()
                    sd.close()
                    os.execv(sys.executable, ['python'] + sys.argv)
                stop_reason = "serialutil stopped due to time expiration"
                break

            # if we didn't read anything, loop
            if len(x) == 0:
                continue

            # convert carriage returns to newlines.
            if x == b"\r":
                if cr_to_nl:
                    x = b"\n"
                else:
                    continue

            # set basetime to when first char is received
            if not basetime:
                basetime = time.time()

            if show_time and newline:
                linetime = time.time()
                elapsed = linetime-basetime
                delta = elapsed-prev1
                msg = "[%4.6f %2.6f] " % (elapsed, delta)
                if not quiet:
                    if outputfd:
                        outputfd.write(msg)
                if out:
                    try:
                        out.write(msg.encode(sys.stdout.encoding))
                    except:
                        try:
                            out.write(msg.encode("utf8"))
                        except:
                            out.write(msg)

                prev1 = elapsed
                newline = 0

            if show_systime and newline:
                linetime = time.time()
                linetimestr = datetime.datetime.now().strftime(systime_format)
                elapsed = linetime-basetime
                if use_delta:
                    delta = elapsed-prev1
                    msg = "[%s %2.6f] " % (linetimestr, delta)
                else:
                    msg = "[%s] " % (linetimestr)
                if not quiet:
                    outputfd.write(msg)
                if out:
                    try:
                        out.write(msg.encode(sys.stdout.encoding))
                    except:
                        try:
                            out.write(msg.encode("utf8"))
                        except:
                            out.write(msg)

                prev1 = elapsed
                newline = 0


            if not quiet:
                # x is a bytestr
                outputfd.write(x.decode("utf8", "ignore"))

            if out:
                # save bytestring data exactly as received from serial port
                # (ie there is no 'decode' here)
                out.write(x)

            # curline is in unicode
            curline += x.decode("utf8", "ignore")

            # watch for patterns
            if instantpat and not instanttime and \
                    re.search(instantpat, curline):
                # instantpat is in curline:
                instanttime = time.time()

            # Exit the loop if quitpat matches
            if quitpat and re.search(quitpat, curline):
                if restart:
                    vprint(
                        "Restarting %s\n" %
                        datetime.datetime.now().strftime("%H:%M:%S.%f"))
                    if out:
                        out.close()
                    sd.close()
                    os.execv(sys.executable, ['python'] + sys.argv)
                stop_reason = "serialutil stopped because quit pattern '%s' was found" % quitpat
                break

            if x == b"\n":
                newline = 1
                if basepat and re.match(basepat, curline):
                    basetime = linetime
                    elapsed = 0
                    prev1 = 0
                curline = ""
            sys.stdout.flush()
            if out:
                out.flush()

        except EnvironmentError:
            stop_reason = "serialutil stopped due to some external error"
            break
        except KeyboardInterrupt:
            stop_reason = "serialutil stopped due to keyboard interrupt"
            break

    sd.close()
    if instanttime:
        instanttime_str = '%4.6f' % (instanttime-basetime)
        msg = u'\nThe instantpat: "%s" was matched at %s\n' % \
            (instantpat, instanttime_str)
        if not quiet:
            outputfd.write(msg)
            outputfd.flush()
        if out:
            try:
                out.write(msg.encode(sys.stdout.encoding))
            except:
                try:
                    out.write(msg.encode("utf8"))
                except:
                    out.write(msg)
            out.flush()

    if out:
        out.close()

    vprint(stop_reason)


if __name__ == "__main__":
    scrape(sys.argv[1:])
